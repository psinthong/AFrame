;Below are query explanations
;q1: select all records from a collection
;q2: project an attribute
;q3: return boolean statement (e.g., id > 5)
;q4: return total count of records
;q5: sort records based on an attribute in descending order
;q6: sort records based on an attribute in ascending order
;q7: group records based on an attribute ($grp_by_attribute)
;q8: return an aggregate value ($agg_func) of each group
;q9: return all attributes with one new added attribute
;q10: return distinct values of an attribute
;q11: drop an attribute
;q12: inner join with another collection
;q13: left outer join with another collection
;q14: return an aggregate value of an attribute
;q15: select all records from a view
;q16: return one record from each group
;q17: return records from groups that have only one record
;q18: return an unnest attribute along with other existing attributes


[QUERIES]
q1 = from(bucket: "$collection")
    |> range(start: 0)
    |> pivot(rowKey:["_time"], columnKey:["_field"], valueColumn:"_value")
    |> group()
q2 = $subquery
    |> map(fn: (r) => ({$attribute_value}))
q3 = $subquery
    |> filter(fn: (r) => $statement )
q4 = $subquery
    |> count(column: "_measurement")
    |> map(fn: (r) => ({"count":r._measurement}))
q5 = $subquery
    |> sort(columns: [$sort_desc_attr], desc: true)
q6 = $subquery
    |> sort(columns: [$sort_asc_attr], desc:false)
q7 = $subquery
    |> group(columns: [$grp_by_attribute])
q8 = $subquery
    |> group(columns: [$grp_by_attribute])
    |> keep(columns: [$grp_by_attribute, $agg_value
q9 = $subquery
    |> map(fn: (r) => ({ r with $attribute_value }))
q10 = $subquery
    |> distinct(column: "$attribute")
    |> map(fn: (r) => ({"unique":r._value}))
q11 = $subquery
    |> drop(columns: [$attribute_remove])
q12 =$l_alias = $subquery
    $r_alias = $right_query

    join(tables: {l: $l_alias, r: $r_alias}, on: ["$left_on"])
q12_hint = $l_alias = $subquery
    $r_alias = $right_query
    join(tables: {l: $l_alias, r: $r_alias}, on: ["$left_on"])
q13 =
q13_hint =
q14 = $subquery
    |> keep(columns: [$agg_value
q15 = SELECT VALUE t FROM $namespace.$view() t
q16 =  $subquery
       |> unique(column: $grp_by_attribute)
q17 =  SELECT VALUE grp[0].t FROM ($subquery) t GROUP BY $grp_by_attribute GROUP AS grp HAVING COUNT(t)=1
q18 = SELECT t.*, n AS $alias FROM ($subquery) t LEFT OUTER UNNEST t.$attribute AS n

[ATTRIBUTE ALIAS]
single_attribute = r.$attribute
attribute_remove = "$attribute"
attribute_project = "$attribute":r.$attribute
attribute_project_nested = {$attribute} AS $nested_attribute
attribute_value = "$alias":$attribute
rename = "$new_attribute":$old_attribute
agg_value = "$attribute"])
    |> $func
    |> rename(columns: {$attribute: "$agg_func_$attribute"})
attribute_separator = $left, $right
sort_asc_attr = "$attribute"
sort_desc_attr = "$attribute"
grp_by_attribute = "$attribute"
grp_value = $attribute
str_format = "$value"

[ARITHMETIC STATEMENTS]
add = $left + $right
sub = $left - $right
mul = $left * $right
div = $left / $right
mod = $left %% $right
pow = $left ^ $right

[LOGICAL STATEMENTS]
and = $left and $right
or = $left or $right
not = not $left

[COMPARISON STATEMENTS]
eq = $left == $right
ne = $left != $right
gt = $left > $right
lt = $left < $right
ge = $left >= $right
le = $left <= $right
isna = if not exists $left then true else false
notna = if exists $left then true else false
isin =  contains(value: $left, set: [$right])

[TYPE CONVERSION]
to_int32 = int(v: $statement)
to_int32_field = int(v: $attribute)
to_int64 = to_bigint($statement)
to_double = float(v: $statement)
to_double_field = float(v: $attribute)

[LIMIT]
limit = $subquery
    |> limit(n:$num)
return_all = $subquery

[ESCAPE CHARACTERS]
escape = [`"]

[FUNCTIONS]
min = min(column: "$attribute")
max = max(column: "$attribute")
avg = mean(column: "$attribute")
std = stddev(column: "$attribute")
count = count(column: "$attribute")
sum = sum(column: $attribute)
abs = ABS($attribute)
fillna = if not exists $attribute then $value else $attribute
replace = if $statement then $to_replace else $attribute
get_json = $subquery
function_format = $function($attribute)
function_arg_format = $function($attribute, $argument)
kwarg = $key=$value

[SAVE RESULTS]
to_collection = $subquery
                |> to(bucket:"$collection", org:"$namespace")
to_view = CREATE FUNCTION $namespace.$collection(){$subquery};