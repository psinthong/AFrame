;Below are query explanations
;q1: select all records from a collection
;q2: project an attribute
;q3: $condition = a boolean statement (e.g., id > 5)
;q4: return total count of records
;q5: sort records based on an attribute in descending order
;q6: sort records based on an attribute in ascending order
;q7: group records based on an attribute ($grp_by_attribute)
;q8: return an aggregate value ($agg_func) of each group
;q9: return all attributes with one new added attribute
;q10: return distinct values of an attribute
;q11: drop an attribute
;q12: inner join with another collection
;q13: left outer join with another collection
;q14: return an aggregate value of an attribute
;q15: select all records from a view
;q16: return one record from each group
;q17: return records from groups that have only one record
;q18: return an unnest attribute along with other existing attributes


[QUERIES]
q1 = { "$match": {} }
q2 = $subquery,
    { "$project": { $attribute_value } }
q3 = $subquery,
    { "$match": { "$expr": { $statement } } }
q4 = $subquery,
    { "$count": "count" }
q5 = $subquery,
    { "$sort": { $sort_desc_attr } }
q6 = $subquery,
    { "$sort": { $sort_asc_attr } }
q7 = $subquery,
    { "$group": { "_id": { $grp_by_attribute } } }
q8 = $subquery,
    { "$group": { "_id": { $grp_by_attribute }, $agg_value } },
    { "$addFields": { $grp_value } }
q9 = $subquery,
    { "$set": { $attribute_value } }
q10 = $subquery,
    { "$group" : { "_id" : "$$attribute" } }
q11 = $subquery,
    { "$project": { $attribute_remove } }
q12 = $subquery,
    { "$lookup" : { "from" : "$other", "as" : "$other", "let": {"left": "$$left_on"}, "pipeline": [ $right_query, { "$match": { "$expr": { "$eq": ["$$right_on", "$$left"] } } } ] } },
    { "$unwind" : { "path" : "$$other", "preserveNullAndEmptyArrays" : false } },
    { "$replaceRoot" : { "newRoot" : { "$mergeObjects" : [ "$$other", "$$ROOT" ] } } },
    { "$project": { "$other": 0 } }
q12_hint = $subquery,
    { "$lookup" : { "from" : "$other", "as" : "$other", "let": {"left": "$$left_on"}, "pipeline": [ $right_query, { "$match": { "$expr": { "$eq": ["$$right_on", "$$left"] } } } ] } },
    { "$unwind" : { "path" : "$$other", "preserveNullAndEmptyArrays" : false } },
    { "$replaceRoot" : { "newRoot" : { "$mergeObjects" : [ "$$other", "$$ROOT" ] } } },
    { "$project": { "$other": 0 } }
q13 = $subquery,
    { "$lookup" : { "from" : "$other", "as" : "$other", "let": {"left": "$$left_on"}, "pipeline": [ $right_query, { "$match": { "$expr": { "$eq": ["$$right_on", "$$left"] } } } ] } },
    { "$unwind" : { "path" : "$$other", "preserveNullAndEmptyArrays" : true } },
    { "$replaceRoot" : { "newRoot" : { "$mergeObjects" : [ "$$other", "$$ROOT" ] } } },
    { "$project": { "$other": 0 } }
q13_hint = $subquery,
    { "$lookup" : { "from" : "$other", "as" : "$other", "let": {"left": "$$left_on"}, "pipeline": [ $right_query, { "$match": { "$expr": { "$eq": ["$$right_on", "$$left"] } } } ] } },
    { "$unwind" : { "path" : "$$other", "preserveNullAndEmptyArrays" : true } },
    { "$replaceRoot" : { "newRoot" : { "$mergeObjects" : [ "$$other", "$$ROOT" ] } } },
    { "$project": { "$other": 0 } }
q14 = $subquery,
    { "$group": { "_id": {}, $agg_value } },
    { "$project": {"_id": 0 } }
q15 = { "$project": { "_id": 0 } }
q16 = $subquery,
    { "$group": { "_id": { $grp_by_attribute }, "first": {"$first": "$$ROOT"} } },
    { "$replaceRoot": { "newRoot": "$first" } }
q17 = $subquery,
    { "$group": { "_id": { $grp_by_attribute }, "cnt": {"$sum": 1}, "first": {"$first": "$$ROOT"} } },
    { "$match": { "$expr": { "$eq": ["$cnt", 1] } } },
    { "$replaceRoot": { "newRoot": "$first" } }
q18 = $subquery,
    { "$set": { "$attribute_alias": "$$attribute" } },
    { "$unwind": { "path": "$$attribute_alias", "preserveNullAndEmptyArrays": true } }


[ATTRIBUTE ALIAS]
single_attribute = $attribute
attribute_remove = "$attribute": 0
attribute_project = "$attribute": 1
attribute_project_nested = "$attribute": 1
attribute_value = "$alias": { $attribute }
rename = "$new_attribute": "$$old_attribute"
agg_value = "$agg_func_$attribute": { $func }
attribute_separator = $left, $right
sort_asc_attr = "$attribute": 1
sort_desc_attr = "$attribute": -1
grp_by_attribute = "$attribute": "$$attribute"
grp_value = "$attribute": "$_id.$attribute"
str_format = "$value"

[ARITHMETIC STATEMENTS]
add = "$add": [ "$$left", $right ]
sub = "$subtract": [ "$$left", $right ]
mul = "$multiply": [ "$$left", $right ]
div = "$divide": [ "$$left", $right ]
mod = "$mod": [ "$$left", $right ]
pow = "$pow": [ "$$left", $right ]
norm_div = $left

[LOGICAL STATEMENTS]
and = "$and": [ { $left }, { $right } ]
or = "$or": [ { $left }, { $right } ]
not = "$not": [ { $left } ]

[COMPARISON STATEMENTS]
eq = "$eq": ["$$left", $right]
ne = "$ne": ["$$left", $right]
gt = "$gt": ["$$left", $right]
lt = "$lt": ["$$left", $right]
ge = "$gte": ["$$left", $right]
le = "$lte": ["$$left", $right]
isna = "$lt": ["$$left", null]
notna = "$gt": ["$$left", null]
isin = "$in": ["$$left",[$right]]

[TYPE CONVERSION]
to_int32 = "$toInt": { $statement }
to_int32_field = "$toInt": "$$attribute"
to_int64 = "$toLong": { $statement }
to_int64_field = "$toLong": "$$attribute"
to_double = "$toDouble": { $statement }
to_double_field = "$toDouble": "$$attribute"

[LIMIT]
limit = $subquery,
        { "$project": { "_id": 0 } },
        { "$limit" : $num }
return_all = $subquery
             { "$project": { "_id": 0 } }
sample_size = 1000

[ESCAPE CHARACTERS]
escape = [.$"\%%]

[FUNCTIONS]
min = "$min": "$$attribute"
max = "$max": "$$attribute"
avg = "$avg": "$$attribute"
std = "$stdDevSamp": "$$attribute"
abs = "abs": "$$attribute"
count = "$sum": 1
sum = "$sum": "$$attribute"
fillna = "$ifNull": [ "$$attribute", $value ]
replace = "$cond": { "if": { $statement }, "then": $to_replace, "else": "$$attribute" }
get_json = $subquery
function_format = "$$function": "$$attribute"
function_arg_format = "$$function": {"input": "$$attribute", $argument}
kwarg = "$$key": $value

[SAVE RESULTS]
to_collection = $subquery,
    { "$out": "$collection" }
to_view = CREATE FUNCTION $namespace.$collection(){$subquery};
