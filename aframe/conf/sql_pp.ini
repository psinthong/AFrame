;Below are query explanations
;q1: select all records from a collection
;q2: project an attribute
;q3: $condition = a boolean statement (e.g., id > 5)
;q4: return total count of records
;q5: sort records based on an attribute in descending order
;q6: sort records based on an attribute in ascending order
;q7: group records based on an attribute ($grp_by_attribute)
;q8: return an aggregate value ($agg_func) of each group
;q9: return all attributes with one new added attribute
;q10: return distinct values of an attribute
;q11: drop an attribute
;q12: inner join with another collection
;q13: left outer join with another collection
;q14: return an aggregate value of an attribute
;q15: select all records from a view
;q16: return one record from each group
;q17: return records from groups that have only one record
;q18: return an unnest attribute along with other existing attributes


[QUERIES]
q1 = SELECT VALUE t FROM $namespace.$collection t
q2 = SELECT $attribute_value FROM ($subquery) t
q3 = SELECT VALUE t FROM ($subquery) t WHERE $statement
q4 = SELECT VALUE COUNT(*) FROM ($subquery) t
q5 = SELECT VALUE t FROM ($subquery) t ORDER BY $sort_desc_attr DESC
q6 = SELECT VALUE t FROM ($subquery) t ORDER BY $sort_asc_attr ASC
q7 = SELECT * FROM ($subquery) t GROUP BY $grp_by_attribute
q8 = SELECT $grp_by_attribute, $agg_value FROM ($subquery) t GROUP BY $grp_by_attribute
q9 = SELECT t.*, $attribute_value FROM ($subquery) t
q10 = SELECT DISTINCT `$attribute` FROM ($subquery) t
q11 = SELECT VALUE OBJECT_REMOVE(t, $attribute_remove) FROM ($subquery) t
q12 = SELECT $l_alias.*, $r_alias.* FROM ($subquery) AS $l_alias
    INNER JOIN ($right_query) AS $r_alias ON $l_alias.$left_on = $r_alias.$right_on
q12_hint = SELECT $l_alias.*, $r_alias.* FROM ($subquery) AS $l_alias
    INNER JOIN ($right_query) AS $r_alias ON $l_alias.$left_on /*+ indexnl */ = $r_alias.$right_on
q13 = SELECT $l_alias.*, $r_alias.* FROM ($subquery) AS $l_alias
    LEFT OUTER JOIN ($right_query) AS $r_alias ON $l_alias.$left_on = $r_alias.$right_on
q13_hint = SELECT $l_alias.*, $r_alias.* FROM ($subquery) AS $l_alias
    LEFT OUTER JOIN ($right_query) AS $r_alias ON $l_alias.$left_on /*+ indexnl */ = $r_alias.$right_on
q14 = SELECT $agg_value FROM ($subquery) t
q15 = SELECT VALUE t FROM $namespace.$view() t
q16 =  SELECT VALUE grp[0].t FROM ($subquery) t GROUP BY $grp_by_attribute GROUP AS grp
q17 =  SELECT VALUE grp[0].t FROM ($subquery) t GROUP BY $grp_by_attribute GROUP AS grp HAVING COUNT(t)=1
q18 = SELECT t.*, n AS $alias FROM ($subquery) t LEFT OUTER UNNEST t.$attribute AS n

[ATTRIBUTE ALIAS]
single_attribute = $attribute
attribute_remove = '$attribute'
attribute_project = $attribute
attribute_project_nested = {$attribute} AS $nested_attribute
attribute_value = $attribute AS `$alias`
rename = `$old_attribute` AS `$new_attribute`
agg_value = $func AS $agg_func_$attribute
attribute_separator = $left, $right
sort_asc_attr = $attribute
sort_desc_attr = $attribute
grp_by_attribute = $attribute
grp_value = $attribute
str_format = "$value"

[ARITHMETIC STATEMENTS]
add = $left + $right
sub = $left - $right
mul = $left * $right
div = $left / $right
mod = $left %% $right
pow = $left ^ $right

[LOGICAL STATEMENTS]
and = $left AND $right
or = $left OR $right
not = NOT $left

[COMPARISON STATEMENTS]
eq = $left = $right
ne = $left != $right
gt = $left > $right
lt = $left < $right
ge = $left >= $right
le = $left <= $right
isna = $left IS UNKNOWN
notna = $left IS KNOWN
isin = $left IN [$right]

[TYPE CONVERSION]
to_int32 = to_number($statement)
to_int32_field = to_number(`$attribute`)
to_int64 = to_bigint($statement)
to_double = to_double($statement)

[LIMIT]
limit = $subquery LIMIT $num
return_all = $subquery

[ESCAPE CHARACTERS]
escape = [`]

[FUNCTIONS]
min = MIN($attribute)
max = MAX($attribute)
avg = AVG($attribute)
std = STDDEV($attribute)
count = COUNT($attribute)
var = VARIANCE($attribute)
abs = ABS($attribute)
fillna = CASE WHEN $attribute IS UNKNOWN THEN $value ELSE $attribute END
replace = CASE WHEN $statement THEN $to_replace ELSE $attribute END
get_json = $subquery
function_format = $function($attribute)
function_arg_format = $function($attribute, $argument)
kwarg = $key=$value

[SAVE RESULTS]
to_collection = CREATE TYPE $namespace.TempType IF NOT EXISTS AS OPEN{ _uuid: uuid};
                CREATE DATASET $namespace.$collection(TempType) PRIMARY KEY _uuid autogenerated;
                INSERT INTO $namespace.$collection SELECT VALUE ($subquery);
to_view = CREATE FUNCTION $namespace.$collection(){$subquery};