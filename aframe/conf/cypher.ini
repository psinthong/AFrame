;Below are query explanations
;q1: select all records from a collection
;q2: project an attribute
;q3: $condition = a boolean statement (e.g., id > 5)
;q4: return total count of records
;q5: sort records based on an attribute in descending order
;q6: sort records based on an attribute in ascending order
;q7: group records based on an attribute ($grp_by_attribute)
;q8: return an aggregate value ($agg_func) of each group
;q9: return all attributes with one new added attribute
;q10: return distinct values of an attribute
;q11: drop an attribute
;q12: inner join with another collection
;q13: left outer join with another collection
;q14: return an aggregate value of an attribute
;q15: select all records from a view
;q16: return one record from each group
;q17: return records from groups that have only one record
;q18: return an unnest attribute along with other existing attributes


[QUERIES]
q1 = MATCH(t: $collection)

q2 = $subquery
    WITH t{$attribute_value}

q3 = $subquery
    WITH t WHERE $statement

q4 = $subquery
    RETURN COUNT(*) AS t

q5 = $subquery
    WITH t ORDER BY $sort_desc_attr DESC

q6 = $subquery
    WITH t ORDER BY $sort_asc_attr

q7 = $subquery

q8 = $subquery
     WITH {$grp_by_attribute, $agg_value} AS t

q9 = $subquery
     WITH t{.*, $attribute_value}

q10 = $subquery
    WITH DISTINCT($attribute) AS t
    RETURN t

q11 = $subquery
    WITH apoc.map.removeKeys(t {.*}, [$attribute_remove]) AS t

q12 = $subquery
    MATCH (t),($r_alias:$other)
    WHERE t.$left_on = $r_alias.$right_on
    WITH t{.*, $r_alias}

q12_hint = $subquery
    MATCH (t)-[$hint]->($r_alias:$other)
    WITH t{.*, $r_alias}

q13 = $subquery
    OPTIONAL MATCH (t),($r_alias:$other)
    WHERE t.$left_on = $r_alias.$right_on
    WITH t{.*, $r_alias}

q13_hint = $subquery
    OPTIONAL MATCH (t)-[$hint]->($r_alias:$other)
    WITH t{.*, $r_alias}

q14 = $subquery
    WITH {$agg_value} AS t
q15 =

q16 = $subquery
    WITH {$grp_by_attribute} as grp_key , collect(t) as t
    WITH t[0] AS t
q17 = $subquery
    WITH {$grp_by_attribute} as grp_key , collect(t) as t
    WHERE length(t) = 1
    WITH t[0] AS t
q18 = $subquery
    UNWIND t.$attribute AS $alias
    WITH t{.*, $alias:$alias}

[ATTRIBUTE ALIAS]
single_attribute = t.$attribute
attribute_remove = '$attribute'
attribute_project = `$attribute`:t.$attribute
attribute_project_nested = `$nested_attribute`:{`$alias`:t.$attribute}
attribute_value = `$alias`: $attribute
rename = `$new_attribute`: $old_attribute
agg_value = `$agg_func_$attribute`: $func
attribute_separator = $left, $right
sort_asc_attr = t.$attribute
sort_desc_attr = t.$attribute
grp_by_attribute = `$attribute`: t.$attribute
grp_value = `$attribute`
str_format = "$value"

[ARITHMETIC STATEMENTS]
add = $left + $right
sub = $left - $right
mul = $left * $right
div = $left / $right
mod = $left %% $right
pow = $left ^ $right

[LOGICAL STATEMENTS]
and = $left AND $right
or = $left OR $right
not = NOT $left

[COMPARISON STATEMENTS]
eq = $left = $right
ne = $left != $right
gt = $left > $right
lt = $left < $right
ge = $left >= $right
le = $left <= $right
isna = $left IS NULL
notna = $left IS NOT NULL
isin = $left IN [$right]

[TYPE CONVERSION]
to_str = apoc.convert.toInteger($statement)
to_int32 = apoc.convert.toInteger($statement)
to_int32_field = apoc.convert.toInteger($attribute)
to_int64 =
to_int64_field =
to_float = apoc.convert.toFloat($statement)
to_float_field = apoc.convert.toFloat($attribute)

[LIMIT]
limit = $subquery
        RETURN t
        LIMIT $num
return_all = $subquery
            RETURN t

[ESCAPE CHARACTERS]
escape = [`]

[FUNCTIONS]
min = min(t.$attribute)
max = max(t.$attribute)
avg = avg(t.$attribute)
std = stDevP(t.$attribute)
count = count(t.$attribute)
abs = abs(t.$attribute)
fillna = CASE $attribute WHEN NULL THEN $value ELSE $attribute END
replace = CASE $statement WHEN TRUE THEN $to_replace ELSE $attribute END
get_json = $subquery
    WITH t{.*, user_alias:apoc.convert.fromJsonMap(t.$attribute)}
    WITH apoc.map.removeKeys(t {.*}, ["$attribute"]) AS t
    WITH t{.*, $attribute:t.$attribute_alias}
    WITH apoc.map.removeKeys(t {.*}, ["$attribute_alias"]) AS t
function_format = $function($attribute)
function_arg_format = $function($attribute, $argument)
kwarg = $key=$value

[SAVE RESULTS]
to_collection = $subquery,
    { "$out": "$collection" }
to_view =
